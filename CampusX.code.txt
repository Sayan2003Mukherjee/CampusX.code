

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

     

df=pd.read_csv('/content/fraud_detection.csv')
     

df.head()
     
step	type	amount	nameOrig	oldbalanceOrg	newbalanceOrig	nameDest	oldbalanceDest	newbalanceDest	isFraud	isFlaggedFraud
0	1	PAYMENT	9839.64	C1231006815	170136.0	160296.36	M1979787155	0.0	0.0	0.0	0.0
1	1	PAYMENT	1864.28	C1666544295	21249.0	19384.72	M2044282225	0.0	0.0	0.0	0.0
2	1	TRANSFER	181.00	C1305486145	181.0	0.00	C553264065	0.0	0.0	1.0	0.0
3	1	CASH_OUT	181.00	C840083671	181.0	0.00	C38997010	21182.0	0.0	1.0	0.0
4	1	PAYMENT	11668.14	C2048537720	41554.0	29885.86	M1230701703	0.0	0.0	0.0	0.0

df.isnull().sum()
     
step              0
type              0
amount            0
nameOrig          0
oldbalanceOrg     0
newbalanceOrig    0
nameDest          1
oldbalanceDest    2
newbalanceDest    2
isFraud           2
isFlaggedFraud    2
dtype: int64

df.shape
     
(28221, 11)

df.type.value_counts()
     
PAYMENT     13338
CASH_OUT     6635
CASH_IN      5077
TRANSFER     2677
DEBIT         494
Name: type, dtype: int64

type=df['type'].value_counts()
     

transactions=type.index
     

quantity=type.values
     


import plotly.express as px
px.pie(df,values=quantity,names=transactions,hole=0.4,title="Distribution of Transaction Type")
     

df=df.dropna()
     

df
     
step	type	amount	nameOrig	oldbalanceOrg	newbalanceOrig	nameDest	oldbalanceDest	newbalanceDest	isFraud	isFlaggedFraud
0	1	PAYMENT	9839.64	C1231006815	170136.0	160296.36	M1979787155	0.00	0.00	0.0	0.0
1	1	PAYMENT	1864.28	C1666544295	21249.0	19384.72	M2044282225	0.00	0.00	0.0	0.0
2	1	TRANSFER	181.00	C1305486145	181.0	0.00	C553264065	0.00	0.00	1.0	0.0
3	1	CASH_OUT	181.00	C840083671	181.0	0.00	C38997010	21182.00	0.00	1.0	0.0
4	1	PAYMENT	11668.14	C2048537720	41554.0	29885.86	M1230701703	0.00	0.00	0.0	0.0
...	...	...	...	...	...	...	...	...	...	...	...
28215	9	PAYMENT	1011.16	C802172585	317.0	0.00	M1111680498	0.00	0.00	0.0	0.0
28216	9	CASH_OUT	195364.06	C1096102092	0.0	0.00	C2021579766	506957.59	1343781.67	0.0	0.0
28217	9	CASH_OUT	546075.62	C1791035294	0.0	0.00	C1039162432	5075471.31	5621546.93	0.0	0.0
28218	9	CASH_OUT	111003.87	C1145755913	0.0	0.00	C743528393	2533159.94	2644163.81	0.0	0.0
28219	9	CASH_OUT	101025.44	C292739335	0.0	0.00	C299715257	156646.32	491301.04	0.0	0.0
28219 rows × 11 columns


df['isFraud']=df['isFraud'].map({0:'No Fraud',1:'Fraud'})
     

df
     
step	type	amount	nameOrig	oldbalanceOrg	newbalanceOrig	nameDest	oldbalanceDest	newbalanceDest	isFraud	isFlaggedFraud
0	1	PAYMENT	9839.64	C1231006815	170136.0	160296.36	M1979787155	0.00	0.00	No Fraud	0.0
1	1	PAYMENT	1864.28	C1666544295	21249.0	19384.72	M2044282225	0.00	0.00	No Fraud	0.0
2	1	TRANSFER	181.00	C1305486145	181.0	0.00	C553264065	0.00	0.00	Fraud	0.0
3	1	CASH_OUT	181.00	C840083671	181.0	0.00	C38997010	21182.00	0.00	Fraud	0.0
4	1	PAYMENT	11668.14	C2048537720	41554.0	29885.86	M1230701703	0.00	0.00	No Fraud	0.0
...	...	...	...	...	...	...	...	...	...	...	...
28215	9	PAYMENT	1011.16	C802172585	317.0	0.00	M1111680498	0.00	0.00	No Fraud	0.0
28216	9	CASH_OUT	195364.06	C1096102092	0.0	0.00	C2021579766	506957.59	1343781.67	No Fraud	0.0
28217	9	CASH_OUT	546075.62	C1791035294	0.0	0.00	C1039162432	5075471.31	5621546.93	No Fraud	0.0
28218	9	CASH_OUT	111003.87	C1145755913	0.0	0.00	C743528393	2533159.94	2644163.81	No Fraud	0.0
28219	9	CASH_OUT	101025.44	C292739335	0.0	0.00	C299715257	156646.32	491301.04	No Fraud	0.0
28219 rows × 11 columns


df['type'].unique()
     
array(['PAYMENT', 'TRANSFER', 'CASH_OUT', 'DEBIT', 'CASH_IN'],
      dtype=object)

#df.replace(to_replace=['PAYMENT', 'TRANSFER', 'CASH_OUT', 'DEBIT', 'CASH_IN'],value=[2,4,1,3,5],inplace=True)
     

#df
     

df['type'].value_counts()
     
PAYMENT     13338
CASH_OUT     6633
CASH_IN      5077
TRANSFER     2677
DEBIT         494
Name: type, dtype: int64

df
     
step	type	amount	nameOrig	oldbalanceOrg	newbalanceOrig	nameDest	oldbalanceDest	newbalanceDest	isFraud	isFlaggedFraud
0	1	PAYMENT	9839.64	C1231006815	170136.0	160296.36	M1979787155	0.00	0.00	No Fraud	0.0
1	1	PAYMENT	1864.28	C1666544295	21249.0	19384.72	M2044282225	0.00	0.00	No Fraud	0.0
2	1	TRANSFER	181.00	C1305486145	181.0	0.00	C553264065	0.00	0.00	Fraud	0.0
3	1	CASH_OUT	181.00	C840083671	181.0	0.00	C38997010	21182.00	0.00	Fraud	0.0
4	1	PAYMENT	11668.14	C2048537720	41554.0	29885.86	M1230701703	0.00	0.00	No Fraud	0.0
...	...	...	...	...	...	...	...	...	...	...	...
28215	9	PAYMENT	1011.16	C802172585	317.0	0.00	M1111680498	0.00	0.00	No Fraud	0.0
28216	9	CASH_OUT	195364.06	C1096102092	0.0	0.00	C2021579766	506957.59	1343781.67	No Fraud	0.0
28217	9	CASH_OUT	546075.62	C1791035294	0.0	0.00	C1039162432	5075471.31	5621546.93	No Fraud	0.0
28218	9	CASH_OUT	111003.87	C1145755913	0.0	0.00	C743528393	2533159.94	2644163.81	No Fraud	0.0
28219	9	CASH_OUT	101025.44	C292739335	0.0	0.00	C299715257	156646.32	491301.04	No Fraud	0.0
28219 rows × 11 columns


df['type']=df['type'].map({'PAYMENT':1, 'TRANSFER':4, 'CASH_OUT':2, 'DEBIT':5, 'CASH_IN':3})
     


     

df['type'].value_counts()
     
1    13338
2     6633
3     5077
4     2677
5      494
Name: type, dtype: int64

df
     
step	type	amount	nameOrig	oldbalanceOrg	newbalanceOrig	nameDest	oldbalanceDest	newbalanceDest	isFraud	isFlaggedFraud
0	1	1	9839.64	C1231006815	170136.0	160296.36	M1979787155	0.00	0.00	No Fraud	0.0
1	1	1	1864.28	C1666544295	21249.0	19384.72	M2044282225	0.00	0.00	No Fraud	0.0
2	1	4	181.00	C1305486145	181.0	0.00	C553264065	0.00	0.00	Fraud	0.0
3	1	2	181.00	C840083671	181.0	0.00	C38997010	21182.00	0.00	Fraud	0.0
4	1	1	11668.14	C2048537720	41554.0	29885.86	M1230701703	0.00	0.00	No Fraud	0.0
...	...	...	...	...	...	...	...	...	...	...	...
28215	9	1	1011.16	C802172585	317.0	0.00	M1111680498	0.00	0.00	No Fraud	0.0
28216	9	2	195364.06	C1096102092	0.0	0.00	C2021579766	506957.59	1343781.67	No Fraud	0.0
28217	9	2	546075.62	C1791035294	0.0	0.00	C1039162432	5075471.31	5621546.93	No Fraud	0.0
28218	9	2	111003.87	C1145755913	0.0	0.00	C743528393	2533159.94	2644163.81	No Fraud	0.0
28219	9	2	101025.44	C292739335	0.0	0.00	C299715257	156646.32	491301.04	No Fraud	0.0
28219 rows × 11 columns


df['type'].unique()
     
array([1, 4, 2, 5, 3])

df['type'].value_counts()
     
1    13338
2     6633
3     5077
4     2677
5      494
Name: type, dtype: int64

x=df[['type','amount','oldbalanceOrg','newbalanceOrig']]
     

y=df.iloc[:,-2]
     

y
     
0        No Fraud
1        No Fraud
2           Fraud
3           Fraud
4        No Fraud
           ...   
28215    No Fraud
28216    No Fraud
28217    No Fraud
28218    No Fraud
28219    No Fraud
Name: isFraud, Length: 28219, dtype: object

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.20,random_state=42)
     

from sklearn.tree import DecisionTreeClassifier
     

model=DecisionTreeClassifier()
     

model.fit(xtrain,ytrain)
     
DecisionTreeClassifier()

model.score(xtest,ytest)
     
0.9968107725017717

model.predict([[4,180,181,10]])
     
/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning:

X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names

array(['Fraud'], dtype=object)

x
     
type	amount	oldbalanceOrg	newbalanceOrig
0	1	9839.64	170136.0	160296.36
1	1	1864.28	21249.0	19384.72
2	4	181.00	181.0	0.00
3	2	181.00	181.0	0.00
4	1	11668.14	41554.0	29885.86
...	...	...	...	...
28215	1	1011.16	317.0	0.00
28216	2	195364.06	0.0	0.00
28217	2	546075.62	0.0	0.00
28218	2	111003.87	0.0	0.00
28219	2	101025.44	0.0	0.00
28219 rows × 4 columns


from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
     

models=[]
results=[]
names=[]

     

models.append(('LR',LogisticRegression()))
models.append(('LDA',LinearDiscriminantAnalysis()))
models.append(('KNN',KNeighborsClassifier()))
models.append(('CART',DecisionTreeClassifier()))
models.append(('NB',GaussianNB()))
models.append(('SVM',SVC()))


     

models
     
[('LR', LogisticRegression()),
 ('LDA', LinearDiscriminantAnalysis()),
 ('KNN', KNeighborsClassifier()),
 ('CART', DecisionTreeClassifier()),
 ('NB', GaussianNB()),
 ('SVM', SVC())]

from sklearn import model_selection
for name,model in models:
  kfold=model_selection.KFold(n_splits=10,random_state=7,shuffle=True)
  cv_results=model_selection.cross_val_score(model,x,y,cv=kfold,scoring='accuracy')
  results.append(cv_results)
  names.append(name)
  msg="%s: %f (%f)" %(name,cv_results.mean(),cv_results.std())
  print(msg)

     
LR: 0.997413 (0.000977)
LDA: 0.994082 (0.001495)
KNN: 0.996988 (0.001167)
CART: 0.997236 (0.001025)
NB: 0.930687 (0.142037)
SVM: 0.996952 (0.001167)


     